// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file video.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "video.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace video {






Frame::Frame()
{
}

Frame::~Frame()
{
}

Frame::Frame(
        const Frame& x)
{
    m_time_id = x.m_time_id;
    m_frame_id = x.m_frame_id;
    m_from = x.m_from;
    m_frame_bytes = x.m_frame_bytes;
    m_rows = x.m_rows;
    m_cols = x.m_cols;
    m_channels = x.m_channels;
}

Frame::Frame(
        Frame&& x) noexcept
{
    m_time_id = x.m_time_id;
    m_frame_id = x.m_frame_id;
    m_from = std::move(x.m_from);
    m_frame_bytes = std::move(x.m_frame_bytes);
    m_rows = x.m_rows;
    m_cols = x.m_cols;
    m_channels = x.m_channels;
}

Frame& Frame::operator =(
        const Frame& x)
{

    m_time_id = x.m_time_id;
    m_frame_id = x.m_frame_id;
    m_from = x.m_from;
    m_frame_bytes = x.m_frame_bytes;
    m_rows = x.m_rows;
    m_cols = x.m_cols;
    m_channels = x.m_channels;
    return *this;
}

Frame& Frame::operator =(
        Frame&& x) noexcept
{

    m_time_id = x.m_time_id;
    m_frame_id = x.m_frame_id;
    m_from = std::move(x.m_from);
    m_frame_bytes = std::move(x.m_frame_bytes);
    m_rows = x.m_rows;
    m_cols = x.m_cols;
    m_channels = x.m_channels;
    return *this;
}

bool Frame::operator ==(
        const Frame& x) const
{
    return (m_time_id == x.m_time_id &&
           m_frame_id == x.m_frame_id &&
           m_from == x.m_from &&
           m_frame_bytes == x.m_frame_bytes &&
           m_rows == x.m_rows &&
           m_cols == x.m_cols &&
           m_channels == x.m_channels);
}

bool Frame::operator !=(
        const Frame& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member time_id
 * @param _time_id New value for member time_id
 */
void Frame::time_id(
        int32_t _time_id)
{
    m_time_id = _time_id;
}

/*!
 * @brief This function returns the value of member time_id
 * @return Value of member time_id
 */
int32_t Frame::time_id() const
{
    return m_time_id;
}

/*!
 * @brief This function returns a reference to member time_id
 * @return Reference to member time_id
 */
int32_t& Frame::time_id()
{
    return m_time_id;
}


/*!
 * @brief This function sets a value in member frame_id
 * @param _frame_id New value for member frame_id
 */
void Frame::frame_id(
        int32_t _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function returns the value of member frame_id
 * @return Value of member frame_id
 */
int32_t Frame::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
int32_t& Frame::frame_id()
{
    return m_frame_id;
}


/*!
 * @brief This function copies the value in member from
 * @param _from New value to be copied in member from
 */
void Frame::from(
        const std::string& _from)
{
    m_from = _from;
}

/*!
 * @brief This function moves the value in member from
 * @param _from New value to be moved in member from
 */
void Frame::from(
        std::string&& _from)
{
    m_from = std::move(_from);
}

/*!
 * @brief This function returns a constant reference to member from
 * @return Constant reference to member from
 */
const std::string& Frame::from() const
{
    return m_from;
}

/*!
 * @brief This function returns a reference to member from
 * @return Reference to member from
 */
std::string& Frame::from()
{
    return m_from;
}


/*!
 * @brief This function copies the value in member frame_bytes
 * @param _frame_bytes New value to be copied in member frame_bytes
 */
void Frame::frame_bytes(
        const video::OctetSeq& _frame_bytes)
{
    m_frame_bytes = _frame_bytes;
}

/*!
 * @brief This function moves the value in member frame_bytes
 * @param _frame_bytes New value to be moved in member frame_bytes
 */
void Frame::frame_bytes(
        video::OctetSeq&& _frame_bytes)
{
    m_frame_bytes = std::move(_frame_bytes);
}

/*!
 * @brief This function returns a constant reference to member frame_bytes
 * @return Constant reference to member frame_bytes
 */
const video::OctetSeq& Frame::frame_bytes() const
{
    return m_frame_bytes;
}

/*!
 * @brief This function returns a reference to member frame_bytes
 * @return Reference to member frame_bytes
 */
video::OctetSeq& Frame::frame_bytes()
{
    return m_frame_bytes;
}


/*!
 * @brief This function sets a value in member rows
 * @param _rows New value for member rows
 */
void Frame::rows(
        int32_t _rows)
{
    m_rows = _rows;
}

/*!
 * @brief This function returns the value of member rows
 * @return Value of member rows
 */
int32_t Frame::rows() const
{
    return m_rows;
}

/*!
 * @brief This function returns a reference to member rows
 * @return Reference to member rows
 */
int32_t& Frame::rows()
{
    return m_rows;
}


/*!
 * @brief This function sets a value in member cols
 * @param _cols New value for member cols
 */
void Frame::cols(
        int32_t _cols)
{
    m_cols = _cols;
}

/*!
 * @brief This function returns the value of member cols
 * @return Value of member cols
 */
int32_t Frame::cols() const
{
    return m_cols;
}

/*!
 * @brief This function returns a reference to member cols
 * @return Reference to member cols
 */
int32_t& Frame::cols()
{
    return m_cols;
}


/*!
 * @brief This function sets a value in member channels
 * @param _channels New value for member channels
 */
void Frame::channels(
        int32_t _channels)
{
    m_channels = _channels;
}

/*!
 * @brief This function returns the value of member channels
 * @return Value of member channels
 */
int32_t Frame::channels() const
{
    return m_channels;
}

/*!
 * @brief This function returns a reference to member channels
 * @return Reference to member channels
 */
int32_t& Frame::channels()
{
    return m_channels;
}





Operation::Operation()
{
}

Operation::~Operation()
{
}

Operation::Operation(
        const Operation& x)
{
    m_operation_id = x.m_operation_id;
    m_opera_seq_num = x.m_opera_seq_num;
    m_action = x.m_action;
}

Operation::Operation(
        Operation&& x) noexcept
{
    m_operation_id = x.m_operation_id;
    m_opera_seq_num = x.m_opera_seq_num;
    m_action = x.m_action;
}

Operation& Operation::operator =(
        const Operation& x)
{

    m_operation_id = x.m_operation_id;
    m_opera_seq_num = x.m_opera_seq_num;
    m_action = x.m_action;
    return *this;
}

Operation& Operation::operator =(
        Operation&& x) noexcept
{

    m_operation_id = x.m_operation_id;
    m_opera_seq_num = x.m_opera_seq_num;
    m_action = x.m_action;
    return *this;
}

bool Operation::operator ==(
        const Operation& x) const
{
    return (m_operation_id == x.m_operation_id &&
           m_opera_seq_num == x.m_opera_seq_num &&
           m_action == x.m_action);
}

bool Operation::operator !=(
        const Operation& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member operation_id
 * @param _operation_id New value for member operation_id
 */
void Operation::operation_id(
        int32_t _operation_id)
{
    m_operation_id = _operation_id;
}

/*!
 * @brief This function returns the value of member operation_id
 * @return Value of member operation_id
 */
int32_t Operation::operation_id() const
{
    return m_operation_id;
}

/*!
 * @brief This function returns a reference to member operation_id
 * @return Reference to member operation_id
 */
int32_t& Operation::operation_id()
{
    return m_operation_id;
}


/*!
 * @brief This function sets a value in member opera_seq_num
 * @param _opera_seq_num New value for member opera_seq_num
 */
void Operation::opera_seq_num(
        int32_t _opera_seq_num)
{
    m_opera_seq_num = _opera_seq_num;
}

/*!
 * @brief This function returns the value of member opera_seq_num
 * @return Value of member opera_seq_num
 */
int32_t Operation::opera_seq_num() const
{
    return m_opera_seq_num;
}

/*!
 * @brief This function returns a reference to member opera_seq_num
 * @return Reference to member opera_seq_num
 */
int32_t& Operation::opera_seq_num()
{
    return m_opera_seq_num;
}


/*!
 * @brief This function sets a value in member action
 * @param _action New value for member action
 */
void Operation::action(
        video::OperationAction _action)
{
    m_action = _action;
}

/*!
 * @brief This function returns the value of member action
 * @return Value of member action
 */
video::OperationAction Operation::action() const
{
    return m_action;
}

/*!
 * @brief This function returns a reference to member action
 * @return Reference to member action
 */
video::OperationAction& Operation::action()
{
    return m_action;
}




} // namespace video
// Include auxiliary functions like for serializing/deserializing.
#include "videoCdrAux.ipp"

