// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file video.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_VIDEO_VIDEO_H_
#define _FAST_DDS_GENERATED_VIDEO_VIDEO_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(VIDEO_SOURCE)
#define VIDEO_DllAPI __declspec( dllexport )
#else
#define VIDEO_DllAPI __declspec( dllimport )
#endif // VIDEO_SOURCE
#else
#define VIDEO_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define VIDEO_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace video {



typedef std::vector<char> OctetSeq;



/*!
 * @brief This class represents the structure Frame defined by the user in the IDL file.
 * @ingroup video
 */
class Frame
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Frame();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Frame();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object video::Frame that will be copied.
     */
    eProsima_user_DllExport Frame(
            const Frame& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object video::Frame that will be copied.
     */
    eProsima_user_DllExport Frame(
            Frame&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object video::Frame that will be copied.
     */
    eProsima_user_DllExport Frame& operator =(
            const Frame& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object video::Frame that will be copied.
     */
    eProsima_user_DllExport Frame& operator =(
            Frame&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x video::Frame object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Frame& x) const;

    /*!
     * @brief Comparison operator.
     * @param x video::Frame object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Frame& x) const;

    /*!
     * @brief This function sets a value in member time_id
     * @param _time_id New value for member time_id
     */
    eProsima_user_DllExport void time_id(
            int32_t _time_id);

    /*!
     * @brief This function returns the value of member time_id
     * @return Value of member time_id
     */
    eProsima_user_DllExport int32_t time_id() const;

    /*!
     * @brief This function returns a reference to member time_id
     * @return Reference to member time_id
     */
    eProsima_user_DllExport int32_t& time_id();


    /*!
     * @brief This function sets a value in member frame_id
     * @param _frame_id New value for member frame_id
     */
    eProsima_user_DllExport void frame_id(
            int32_t _frame_id);

    /*!
     * @brief This function returns the value of member frame_id
     * @return Value of member frame_id
     */
    eProsima_user_DllExport int32_t frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport int32_t& frame_id();


    /*!
     * @brief This function copies the value in member from
     * @param _from New value to be copied in member from
     */
    eProsima_user_DllExport void from(
            const std::string& _from);

    /*!
     * @brief This function moves the value in member from
     * @param _from New value to be moved in member from
     */
    eProsima_user_DllExport void from(
            std::string&& _from);

    /*!
     * @brief This function returns a constant reference to member from
     * @return Constant reference to member from
     */
    eProsima_user_DllExport const std::string& from() const;

    /*!
     * @brief This function returns a reference to member from
     * @return Reference to member from
     */
    eProsima_user_DllExport std::string& from();


    /*!
     * @brief This function copies the value in member frame_bytes
     * @param _frame_bytes New value to be copied in member frame_bytes
     */
    eProsima_user_DllExport void frame_bytes(
            const video::OctetSeq& _frame_bytes);

    /*!
     * @brief This function moves the value in member frame_bytes
     * @param _frame_bytes New value to be moved in member frame_bytes
     */
    eProsima_user_DllExport void frame_bytes(
            video::OctetSeq&& _frame_bytes);

    /*!
     * @brief This function returns a constant reference to member frame_bytes
     * @return Constant reference to member frame_bytes
     */
    eProsima_user_DllExport const video::OctetSeq& frame_bytes() const;

    /*!
     * @brief This function returns a reference to member frame_bytes
     * @return Reference to member frame_bytes
     */
    eProsima_user_DllExport video::OctetSeq& frame_bytes();


    /*!
     * @brief This function sets a value in member rows
     * @param _rows New value for member rows
     */
    eProsima_user_DllExport void rows(
            int32_t _rows);

    /*!
     * @brief This function returns the value of member rows
     * @return Value of member rows
     */
    eProsima_user_DllExport int32_t rows() const;

    /*!
     * @brief This function returns a reference to member rows
     * @return Reference to member rows
     */
    eProsima_user_DllExport int32_t& rows();


    /*!
     * @brief This function sets a value in member cols
     * @param _cols New value for member cols
     */
    eProsima_user_DllExport void cols(
            int32_t _cols);

    /*!
     * @brief This function returns the value of member cols
     * @return Value of member cols
     */
    eProsima_user_DllExport int32_t cols() const;

    /*!
     * @brief This function returns a reference to member cols
     * @return Reference to member cols
     */
    eProsima_user_DllExport int32_t& cols();


    /*!
     * @brief This function sets a value in member channels
     * @param _channels New value for member channels
     */
    eProsima_user_DllExport void channels(
            int32_t _channels);

    /*!
     * @brief This function returns the value of member channels
     * @return Value of member channels
     */
    eProsima_user_DllExport int32_t channels() const;

    /*!
     * @brief This function returns a reference to member channels
     * @return Reference to member channels
     */
    eProsima_user_DllExport int32_t& channels();

private:

    int32_t m_time_id{0};
    int32_t m_frame_id{0};
    std::string m_from;
    video::OctetSeq m_frame_bytes;
    int32_t m_rows{0};
    int32_t m_cols{0};
    int32_t m_channels{0};

};
/*!
 * @brief This class represents the enumeration OperationAction defined by the user in the IDL file.
 * @ingroup video
 */
enum OperationAction : uint32_t
{
    FORWARD,
    BACK,
    TURN_LEFT,
    TURN_RIGHT
};


/*!
 * @brief This class represents the structure Operation defined by the user in the IDL file.
 * @ingroup video
 */
class Operation
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Operation();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Operation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object video::Operation that will be copied.
     */
    eProsima_user_DllExport Operation(
            const Operation& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object video::Operation that will be copied.
     */
    eProsima_user_DllExport Operation(
            Operation&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object video::Operation that will be copied.
     */
    eProsima_user_DllExport Operation& operator =(
            const Operation& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object video::Operation that will be copied.
     */
    eProsima_user_DllExport Operation& operator =(
            Operation&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x video::Operation object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Operation& x) const;

    /*!
     * @brief Comparison operator.
     * @param x video::Operation object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Operation& x) const;

    /*!
     * @brief This function sets a value in member operation_id
     * @param _operation_id New value for member operation_id
     */
    eProsima_user_DllExport void operation_id(
            int32_t _operation_id);

    /*!
     * @brief This function returns the value of member operation_id
     * @return Value of member operation_id
     */
    eProsima_user_DllExport int32_t operation_id() const;

    /*!
     * @brief This function returns a reference to member operation_id
     * @return Reference to member operation_id
     */
    eProsima_user_DllExport int32_t& operation_id();


    /*!
     * @brief This function sets a value in member opera_seq_num
     * @param _opera_seq_num New value for member opera_seq_num
     */
    eProsima_user_DllExport void opera_seq_num(
            int32_t _opera_seq_num);

    /*!
     * @brief This function returns the value of member opera_seq_num
     * @return Value of member opera_seq_num
     */
    eProsima_user_DllExport int32_t opera_seq_num() const;

    /*!
     * @brief This function returns a reference to member opera_seq_num
     * @return Reference to member opera_seq_num
     */
    eProsima_user_DllExport int32_t& opera_seq_num();


    /*!
     * @brief This function sets a value in member action
     * @param _action New value for member action
     */
    eProsima_user_DllExport void action(
            video::OperationAction _action);

    /*!
     * @brief This function returns the value of member action
     * @return Value of member action
     */
    eProsima_user_DllExport video::OperationAction action() const;

    /*!
     * @brief This function returns a reference to member action
     * @return Reference to member action
     */
    eProsima_user_DllExport video::OperationAction& action();

private:

    int32_t m_operation_id{0};
    int32_t m_opera_seq_num{0};
    video::OperationAction m_action{video::FORWARD};

};

} // namespace video

#endif // _FAST_DDS_GENERATED_VIDEO_VIDEO_H_



